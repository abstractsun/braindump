#!/usr/bin/env bash
# braindump
# (c) abstractsun
# License: GPL version 3 or, at your option, any later version

COMPAT_SCRIPT=".scripts/editor_compat"
if [[ -f "$COMPAT_SCRIPT" ]];then
    source "$COMPAT_SCRIPT"
fi
if [[ -z "$BRAINDUMP_EDITOR" ]]; then
    BRAINDUMP_EDITOR="nano"
    function bd_open_file_line () { cat "/dev/null"; }
fi
export BRAINDUMP_EDITOR

OLDIFS=$IFS
IFS=$'\n'

ENABLE_TRIAGE_CACHE=true
if [[ "$1" == "nocache" ]]; then
    echo "nocache"
    shift
    ENABLE_TRIAGE_CACHE=false
fi
if [[ "$1" == "cache" ]]; then
    echo "cache"
    shift
    ENABLE_TRIAGE_CACHE=true
fi
CLEAR_TRIAGE_CACHE=false
if [[ "$1" == "clearcache" ]]; then
    shift
    CLEAR_TRIAGE_CACHE=true
fi
OLDEST_NEEDING_TRIAGE_FILE=".braindump/oldest_needing_triage_v1"
if $ENABLE_TRIAGE_CACHE; then
    mkdir -p ".braindump"
    if $CLEAR_TRIAGE_CACHE; then
        echo "Clearing cache"
        rm -f "$OLDEST_NEEDING_TRIAGE_FILE"
    fi
    touch "$OLDEST_NEEDING_TRIAGE_FILE"
    OLDEST_NEEDING_TRIAGE_TIMESTAMP="$(cat $OLDEST_NEEDING_TRIAGE_FILE)"
fi

echo "Checking TODO list"
./todo

OLDIFS="$IFS"
IFS=$'\n'

echo "Getting files"
if $ENABLE_TRIAGE_CACHE; then
    if [[ ! -f "$OLDEST_NEEDING_TRIAGE_FILE" ]]; then
        echo "triage needs to build a cache. This may take a while."
    fi
fi
if [ -n "$1" ]; then
    ALL="$@"
fi;
if [ -z "$ALL" ]; then
    if $ENABLE_TRIAGE_CACHE; then
        if [[ -n "$OLDEST_NEEDING_TRIAGE_TIMESTAMP" ]]; then
            OLDEST_NEEDING_TRIAGE_SECONDS="`date -d "$OLDEST_NEEDING_TRIAGE_TIMESTAMP" +%s`"
            BEFORE_OLDEST_NEEDING_TRIAGE_SECONDS=$(( $OLDEST_NEEDING_TRIAGE_SECONDS - 86400 ))
            BEFORE_OLDEST_NEEDING_TRIAGE="`date --date="@$BEFORE_OLDEST_NEEDING_TRIAGE_SECONDS"`"
            TIME_ARG="-newermt"
            TIME_ARG_2="$BEFORE_OLDEST_NEEDING_TRIAGE"
        fi
    fi

    ALL="";
    if [ -d ideas ]; then
        ALL+="$(echo $'\n'"$(find $PWD/ideas/* -type f $TIME_ARG $TIME_ARG_2 -not -regex ".*\.swp$" -not -regex ".*~$" -not -regex ".*#$" -not -regex ".*\.bak$" -printf '%p:%Ts:' -exec tail -1 '{}' ';' -printf '\n' | grep -vP "(^[^:]*:[^:]*:\[TRIAGE\]\s*$|^$)" | cut -d : -f 1,2)")"
    fi;
    if [ -d notes ]; then
        ALL+="$(echo $'\n'"$(find $PWD/notes/* -type f $TIME_ARG $TIME_ARG_2 -not -regex ".*\.swp$" -not -regex ".*~$" -not -regex ".*#$" -not -regex ".*\.bak$" -printf '%p:%Ts:' -exec tail -1 '{}' ';' -printf '\n' | grep -vP "(^[^:]*:[^:]*:\[TRIAGE\]\s*$|^$)" | cut -d : -f 1,2)")"
    fi;
fi;
#echo "$(echo $'\n'"$(find $PWD/{ideas,notes}/* -type f $TIME_ARG $TIME_ARG_2 -not -regex ".*\.swp$" -not -regex ".*~$" -not -regex ".*#$" -not -regex ".*\.bak$" -printf '%p:%Ts:' -exec tail -1 '{}' ';' -printf '\n' | grep -vP "(^[^:]*:[^:]*:\[TRIAGE\]\s*$|^$)" )")"


echo "Finding files needing triage"
NEEDING_TRIAGE=""
NEED_TRIAGE_COUNT=0
for file in $ALL; do
    THIS_NEEDING_TRIAGE="${file%%:*}"
    NEEDING_TRIAGE+=$'\n'"$THIS_NEEDING_TRIAGE"
    NEED_TRIAGE_COUNT=$(($NEED_TRIAGE_COUNT + 1))
    if $ENABLE_TRIAGE_CACHE; then
        THIS_NEEDING_TRIAGE_SECONDS="${file##*:}"
        if [[ -z "$NEW_OLDEST_NEEDING_TRIAGE_SECONDS" ]]; then
            OLDEST_NEEDING_TRIAGE="$THIS_NEEDING_TRIAGE"
            NEW_OLDEST_NEEDING_TRIAGE_SECONDS=$THIS_NEEDING_TRIAGE_SECONDS
        else
            if [[ $THIS_NEEDING_TRIAGE_SECONDS -lt $NEW_OLDEST_NEEDING_TRIAGE_SECONDS ]]; then
                OLDEST_NEEDING_TRIAGE="$THIS_NEEDING_TRIAGE"
                NEW_OLDEST_NEEDING_TRIAGE_SECONDS=$THIS_NEEDING_TRIAGE_SECONDS
            fi
        fi
    fi
done
if [[ -n "$OLDEST_NEEDING_TRIAGE" ]]; then
    NEW_OLDEST_NEEDING_TRIAGE_TIMESTAMP="$(date "+%a %b %e %T %Z %Y" --date="@$(stat "$OLDEST_NEEDING_TRIAGE" -c %Y)")"
fi

if $ENABLE_TRIAGE_CACHE; then
    echo "$NEW_OLDEST_NEEDING_TRIAGE_TIMESTAMP" > $OLDEST_NEEDING_TRIAGE_FILE
fi

if [[ $NEED_TRIAGE_COUNT > 0 ]]; then
    echo "Files needing triage: $NEED_TRIAGE_COUNT";
    if $ENABLE_TRIAGE_CACHE; then
        echo "triage thinks the stalest file needing triage is $OLDEST_NEEDING_TRIAGE"
        echo "It was last modified on: $NEW_OLDEST_NEEDING_TRIAGE_TIMESTAMP"
    fi
else
    echo "Nothing left to triage"
fi

for file in $NEEDING_TRIAGE; do
    echo "Opening file for triage: (Ctrl+C to cancel)";
    echo "$file";
    sleep 4;
    if [[ "$BRAINDUMP_EDITOR" =~ vim ]]; then
        $BRAINDUMP_EDITOR "$file" -s .scripts/vim_triage_start || "$BRAINDUMP_EDITOR" "$file";
    elif [[ "$BRAINDUMP_EDITOR_OPEN_WITH" == true ]]; then
        TRIAGE_LINE="`grep -n [TRIAGE] "$file" | sed "s/:.*//" | head -1`"
        # Reverting IFS ensures that parameter expansion works properly in the custom editor command
        IFS=$OLDIFS
        bd_open_file_line "$file" "$TRIAGE_LINE"
        OLDIFS=$IFS
        IFS=$'\n'
    else
        $BRAINDUMP_EDITOR "$file"
    fi
done

